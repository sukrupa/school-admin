set :local_path, "target"
set :deploy_artifact, "school-admin.zip"
set :should_recreate_database, false
set :web_server_port, 80

task :development do
  set :user, "go"
  set :target_server, "twu-ci"
  set :deploy_path, "/var/opt/sukrupa/school-admin"
  set :should_recreate_database, true
  set :web_server_port, 8080
  role :target_server, "#{target_server}"  
end

task :staging do
  set :user, "go"
  set :target_server, "twu-staging"
  set :deploy_path, "/var/opt/sukrupa/school-admin"
  set :web_server_port, 8080  
  role :target_server, "#{target_server}"
end

task :production do
  set :user, "ubuntu"
  set :target_server, "school.sukrupa.org"
  set :deploy_path, "~/sukrupa/school-admin"
  role :target_server, "#{target_server}", :ssh_options => { :keys => "~/.ssh/sukrupa-ec2.pem" }
end

task :deploy do
  copy_deploy_artifact
  unzip_deploy_artifact
  stop_remote_server
  start_remote_server
  update_or_recreate_database
  safety_check
end

task :stop_remote_server do
  run "cd #{deploy_path} && sh stop-server.sh"
end

task :copy_deploy_artifact do
  run "rm -rf #{deploy_path}"
  run "mkdir -p #{deploy_path}"
  upload "#{local_path}/#{deploy_artifact}", "#{deploy_path}", :via => :scp
end

task :unzip_deploy_artifact do
  run "cd #{deploy_path} && unzip -o #{deploy_artifact}"
end

task :start_remote_server do
  run "cd #{deploy_path} && sh start-server.sh"
end

task :update_or_recreate_database do
  if should_recreate_database
    recreate_database
    insert_real_data
  else
    update_database
  end
end

task :update_database do
  run "cd #{deploy_path} && sh install/update-database.sh"
end


task :recreate_database do
  run "cd #{deploy_path} && sh install/install-database.sh"
end

task :insert_real_data do
  run "cd #{deploy_path} && sh install/ant/bin/ant -Dresources.main.dir=install/dbdeploy -Dlib.main.dir=lib -Dsrc.sql.dir=install/dbdeploy/sql -Dsrc.sql.script.dir=install/dbdeploy/sql/script -Dsrc.sql.delta.dir=install/dbdeploy/sql/delta -Dops.deploy.sql.dir=install/dbdeploy/sql/ -buildfile install/dbdeploy/build.xml db:import-data"
end

def login_info
  content = File.open("src/main/resources/jetty-realms.properties", "r").read
  content.sub(/,.*/, '').gsub(/\s+/, '')
end

task :safety_check do
  times = 0;
  while times < 6
    wgetresult = system "wget --spider http://#{login_info}@#{target_server}:#{web_server_port}/students"
    if wgetresult
      break
    else
      times = times + 1
      sleep 10
    end
  end
  unless wgetresult
    fail "Could not contact webserver."
  end
end
