<project name="macros">
    <macrodef name="compile">
        <attribute name="srcdir"/>
        <attribute name="destdir"/>
        <attribute name="classpathref"/>
        <sequential>
            <javac includeantruntime="false" srcdir="@{srcdir}" destdir="@{destdir}" classpathref="@{classpathref}"/>
        </sequential>
    </macrodef>

    <macrodef name="test">
        <attribute name="type"/>

        <sequential>
            <test-without-failing type="@{type}"/>
            <fail if="test.@{type}.failed" message="Some @{type} tests failed"/>
        </sequential>
    </macrodef>

    <macrodef name="test-without-failing">
        <attribute name="type"/>

        <sequential>
            <junit printsummary="false"
                   fork="true"
                   haltonfailure="false" haltonerror="false" outputtoformatters="false">

                <classpath refid="classpath.run.test.@{type}"/>
                <formatter type="xml"
                           usefile="true"/>
                <batchtest todir="${target.reports.dir}"
                           failureproperty="test.@{type}.failed">
                    <formatter type="plain" usefile="false"/>
                    <fileset dir="${target.test.@{type}.dir}">
                        <include name="**/*Test.class"/>
                    </fileset>
                </batchtest>
            </junit>
        </sequential>
    </macrodef>

    <macrodef name="cobertura-report-gen">
        <sequential>
            <junit printsummary="false" fork="true" forkmode="once" dir="${target.test.cobertura_instrumented.dir}"
                   failureProperty="cobertura-report-gen.failed">
                <sysproperty key="net.sourceforge.cobertura.datafile"
                             file="${target.reports.cobertura.dir}/cobertura.ser"/>
                <classpath location="${target.test.cobertura_instrumented.dir}"/>
                <classpath location="${target.main.dir}"/>
                <classpath refid="classpath.cobertura"/>

                <formatter type="xml"/>
                <batchtest todir="${target.reports.cobertura.dir}">
                    <fileset dir="${target.test.unit.dir}" includes="**/*Test.class"/>
                    <fileset dir="${target.test.integration.dir}" includes="**/*Test.class"/>
                </batchtest>
            </junit>
            <fail if="cobertura-report-gen.failed" message="Cobertura report generation failed"/>
        </sequential>
    </macrodef>

    <macrodef name="run-against-server">
        <attribute name="startServerTarget"/>
        <attribute name="stopServerTarget"/>
        <attribute name="checkServerUpTarget"/>
        <attribute name="cleanupTarget" default="nothing-to-cleanup"/>

        <element name="execute" />

        <sequential>
            <local name="targetToExecute"/>
            <local name="startServerTarget"/>
            <local name="stopServerTarget"/>
            <local name="cleanupTarget"/>
            <local name="serverPort"/>

            <sequential>
                <antcall target="@{stopServerTarget}"/>
            </sequential>
            <parallel>
                <sequential>
                    <echo message="Starting Server using target [@{startServerTarget}] ..."/>
                    <antcall target="@{startServerTarget}"/>
                </sequential>
                <sequential>
                    <antcall target="@{checkServerUpTarget}"/>

                    <execute />

                    <antcall target="@{stopServerTarget}"/>
                    <antcall target="@{cleanupTarget}"/>
                </sequential>
            </parallel>
        </sequential>
    </macrodef>

    <macrodef name="wait.for.server">
        <attribute name="maxwait" default="30"/>
        <attribute name="host"/>
        <attribute name="port"/>
        <sequential>
            <echo message="Waiting for Sukrupa Server Application: @{host}"/>
            <waitfor maxwait="@{maxwait}" maxwaitunit="second" timeoutproperty="app.did.not.start">
                <socket server="@{host}" port="@{port}"/>
            </waitfor>
            <fail if="app.did.not.start"
                  message="Application did not start up at @{host}:@{port} within @{maxwait} seconds."/>
            <echo message="Connection establised to @{host} on port @{port} - application must be up"/>
        </sequential>
    </macrodef>

    <target name="nothing-to-cleanup"/>


</project>
