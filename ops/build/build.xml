<project name="sukrupa" default="all" basedir="../..">

    <import file="properties.xml"/>
    <import file="classpaths.xml"/>
    <import file="db-targets.xml"/>
    <import file="deploy-targets.xml"/>
    <import file="image-targets.xml"/>
    <import file="macros.xml"/>
    <import file="sukrupa-server.xml"/>
    <import file="cucumber.xml"/>
    <import file="sahi.xml"/>

    <target name="clean">
        <delete dir="${target.dir}"/>
        <delete dir="${module.dir}/src/test/twist/functional-test/sahi/userdata/browser/ff"/>
    </target>

    <target name="init">
        <tstamp/>
        <mkdir dir="${target.test.shared.dir}"/>
        <mkdir dir="${target.test.unit.dir}"/>
        <mkdir dir="${target.test.integration.dir}"/>
        <mkdir dir="${target.test.functional.dir}"/>
        <mkdir dir="${target.test.cucumber.java.dir}"/>
        <mkdir dir="${target.test.twist.fixtures.dir}"/>
        <mkdir dir="${target.test.twist.sukrupa-code.dir}"/>
        <mkdir dir="${target.reports.dir}"/>
        <mkdir dir="${target.reports.twist.dir}"/>
        <mkdir dir="${target.reports.cucumber.dir}"/>
        <mkdir dir="${target.main.dir}"/>
        <antcall target="config:sahi"/>
    </target>

    <target name="config:sahi">
        <filter token="appdir" value="${module.dir}" />
        <copy file="${resources.test.dir}/sahi.properties.template" tofile="${resources.test.dir}/sahi.properties" filtering="true"/>
    </target>

    <target name="dev" depends="clean, init, compile:all, copy-resources"/>

    <target name="all" description="Builds, updates the database, runs tests and packages the app."
            depends="clean, init, compile:all, copy-resources, test:unit, db:recreate, img:recreate, test:integration, test:functional, test:twist"/>

    <target name="all-without-functional" description="Does everything except run the functional tests"
            depends="clean, init, compile:all, copy-resources, test:unit, db:recreate, img:recreate, test:integration, test:twist"/>

    <target name="sanity" description="Builds, updates the database, runs tests and packages the app."
            depends="clean, init, compile:all, copy-resources, test:unit, db:recreate, img:recreate, test:integration, test:functional"/>

    <target name="ci"
            description="Runs the build as run on ci"
            depends="clean, init, compile:all, copy-resources, test:unit, db:recreate, img:recreate, test:integration, test:functional, deploy:save-build-number, package"/>

    <target name="unit-test"
            description="Clean, compile and only run unit tests"
            depends="clean, init, compile:all, copy-resources, test:unit"/>

    <target name="install:local"
            depends="clean, init, compile:all, copy-resources, package"
            description="Use this when you are working locally to just compile and package and install">

        <exec executable="./ops/local/local-package.sh"/>
    </target>

    <target name="compile:all"
            depends="compile:main, compile:test:shared, compile:test:unit, compile:test:integration, compile:test:functional, compile:test:twist, compile:test:cucumber"/>

    <target name="compile:main" depends="init">
        <javac includeantruntime="false" srcdir="${src.main.dir}" destdir="${target.main.dir}"
               classpathref="classpath.compilation" debug="true"/>
    </target>

    <target name="compile:test:shared">
        <compile srcdir="${src.test.shared.dir}" destdir="${target.test.shared.dir}"
                 classpathref="classpath.compilation.test.shared"/>
    </target>

    <target name="compile:test:unit">
        <compile srcdir="${src.test.unit.dir}" destdir="${target.test.unit.dir}"
                 classpathref="classpath.compilation.test.unit"/>
    </target>

    <target name="compile:test:integration">
        <compile srcdir="${src.test.integration.dir}" destdir="${target.test.integration.dir}"
                 classpathref="classpath.compilation.test.integration"/>
    </target>

    <target name="compile:test:functional">
        <compile srcdir="${src.test.functional.dir}" destdir="${target.test.functional.dir}"
                 classpathref="classpath.compilation.test.functional"/>
    </target>

    <target name="compile:test:twist">
        <compile srcdir="${src.test.twist.src.dir}" destdir="${target.test.twist.fixtures.dir}"
                 classpathref="classpath.compilation.test.twist"/>
        <copy todir="${target.test.twist.fixtures.dir}">
            <fileset dir="${src.test.twist.src.dir}">
                <exclude name="**/*.java"/>
            </fileset>
            <fileset dir="${src.test.twist.conf.dir}"/>
        </copy>
    </target>

    <target name="compile:test:cucumber">
        <compile srcdir="${src.test.cucumber.java.dir}" destdir="${target.test.cucumber.java.dir}"
                 classpathref="classpath.compilation.test.cucumber"/>
    </target>

    <target name="copy-resources">
        <copy todir="${target.main.dir}">
            <fileset dir="${resources.main.dir}"/>
        </copy>
    </target>

    <target name="test:unit">
        <test type="unit"/>
    </target>

    <target name="test:js">
        <exec executable="${ops.local.dir}/kill-firefox.sh"/>
        <exec executable="${ops.local.dir}/run-js-tests.sh" resultproperty="js.test.fail.code"/>
        <exec executable="${ops.local.dir}/kill-firefox.sh"/>
        <condition property="js.test.failed">
            <not><equals arg1="${js.test.fail.code}" arg2="0"/></not>
        </condition>
        <fail if="js.test.failed" message="Javascript unit tests failed"/>
    </target>

    <target name="test:integration">
        <test type="integration"/>
    </target>

    <target name="test:functional" >
        <run-against-server startServerTarget="sukrupa-server:start"
                            checkServerUpTarget="sukrupa-server:check-is-running"
                            stopServerTarget="sukrupa-server:stop">
            <execute>
                <test-without-failing type="functional"/>
            </execute>
        </run-against-server>

        <fail if="test.functional.failed" message="Some functional tests failed"/>
    </target>

    <target name="test:twist"
            depends="compile:test:twist"
            description="Run only the functional (twist) tests - you need to have built the project first">


        <run-against-server startServerTarget="sukrupa-server:start-for-twist"
                            stopServerTarget="sukrupa-server:stop-for-twist"
                            checkServerUpTarget="sukrupa-server:check-is-running">
            <execute>
                <ant antfile="${ops.build.dir}/twist.xml"
                     dir="${src.test.twist.fixtures.dir}"
                     target="execute-twist"
                     inheritall="true"
                     inheritrefs="true"/>
            </execute>
        </run-against-server>

        <available file="${target.test.twist.failed.file}" property="twist.scenarios.failed"/>
        <fail if="twist.scenarios.failed" message="Some twist tests failed"/>
    </target>

    <target name="test:cucumber"
            description="Run Cucumber">

        <run-against-sahi-and-web-server startWebServerTarget="sukrupa-server:start-for-cucumber"
                                         stopWebServerTarget="sukrupa-server:stop-for-cucumber"
                                         checkWebServerUpTarget="sukrupa-server:check-is-running"
                                         startSahiServerTarget="sahi-server:start"
                                         stopSahiServerTarget="sahi-server:stop"
                                         checkSahiServerUpTarget="sahi-server:check-is-running">
            <execute>
                <antcall target="execute-cucumber"/>
            </execute>
        </run-against-sahi-and-web-server>

        <available file="${target.test.cucumber.failed.file}" property="cucumber.features.failed"/>
        <echo message="Cuke report @ ${target.reports.cucumber.html}"/>
        <fail if="cucumber.features.failed" message="Some cuke tests failed!!"/>
    </target>

    <target name="package" depends="create.module.jar">
        <zip destfile="${target.dir}/${module.deployable.name}">
            <zipfileset dir="${lib.main.dir}" prefix="lib"/>
            <zipfileset file="${target.module.jar}" prefix="lib"/>
            <zipfileset dir="${web.dir}" prefix="${web.root}"/>
            <fileset file="${ops.deploy.dir}/stop-server.sh"/>
            <fileset file="${ops.deploy.dir}/start-server.sh"/>
            <fileset file="${resources.main.dir}/jetty-realms.properties"/>
            <zipfileset dir="${resources.main.dir}/images" prefix="install/images"/>
            <zipfileset file="${ops.deploy.dir}/update-database.sh" prefix="install"/>
            <zipfileset file="${ops.deploy.dir}/install-database.sh" prefix="install"/>
            <zipfileset file="${ops.deploy.dir}/create-image-folder.sh" prefix="install"/>
            <zipfileset file="${ops.deploy.dir}/recreate-image-folder.sh" prefix="install"/>
            <zipfileset file="${ops.deploy.dir}/import-data.sh" prefix="install"/>
            <zipfileset file="${resources.main.dir}/app.properties" prefix="install"/>
            <zipfileset dir="${src.sql.dir}" prefix="install/dbdeploy/sql"/>
            <zipfileset dir="${ops.deploy.sql.dir}" prefix="install/dbdeploy/sql"/>
            <zipfileset dir="${ops.build.dir}" prefix="install/build">
                <include name="*.xml"/>
            </zipfileset>
            <zipfileset dir="${tools.importer.dir}" prefix="install/importer" />
            <zipfileset dir="${tools.ant.dir}/bin" prefix="install/ant/bin">
                <include name="ant"/>
            </zipfileset>
            <zipfileset dir="${tools.ant.dir}/lib" prefix="install/ant/lib">
                <include name="**/ant.jar"/>
                <include name="**/ant-launcher.jar"/>
                <include name="**/dbdeploy*.jar"/>
                <include name="**/hsql*.jar"/>
            </zipfileset>
        </zip>
    </target>

    <target name="create.module.jar">
        <jar basedir="${target.main.dir}" jarfile="${target.module.jar}" excludes="jetty-realms.properties" />
    </target>

</project>
